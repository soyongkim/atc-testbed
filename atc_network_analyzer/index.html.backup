<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>ATC Network Analyzer</title>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/webrtc-adapter/6.0.3/adapter.min.js" ></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.7.2/jquery.min.js" ></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery.blockUI/2.70/jquery.blockUI.min.js" ></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.0.2/js/bootstrap.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/4.1.0/bootbox.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/spin.js/2.3.2/spin.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.bundle.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js"></script>
<script>
	var ctx1 = document.getElementById('myChart1');
	var ctx2 = document.getElementById('myChart2');  
	var config = {
		type: 'line',
		data: {
			labels: [ // Date Objects
				'data1',
				'data2',
				'data3',
				'data4',
				'data5',
			],
			datasets: []
		},
		options: {
			maintainAspectRatio: false,
			title: {
				text: 'Chart.js Time Scale'
			},
			scales: {
				yAxes: [{
					scaleLabel: {
						display: true,
						labelString: 'Throughput'
					},
                    ticks: {
                        max: 200,
                        min: 0
                    }
				}]
			},
            animaion: false
		}
	};

	//차트 그리기
	var myChart1 = new Chart(ctx1, config);
	var myChart2 = new Chart(ctx2, config);
    var datas;
	myChart1.update();
	myChart2.update();

	document.getElementById('start').onclick = function(){
		const target = document.getElementById('start');
		target.disabled = true;
		setInterval(function () {
			// console.log("Send bitrate with id");
			fetch('https://192.168.93.13:50000/data')
				.then((res) => res.json())
				.then((data) => datas = data);

			console.log(datas);
			// 데이터셋이 이미 존재했는지 확인하고 추가
			var curData = datas.dataset;
			var dataset = config.data.datasets;

			var search = false;
			for (var i = 0; i < curData.length; i++) {
				for (var j = 0; j < dataset.length; j++) {
					if (dataset[j].label == curData[i].id) {
						search = true;
						var bitData = dataset[j].data;
						for (var k = 0; k < 5; k++) {
							if (curData[i].bitrate[k])
								bitData[k] = curData[i].bitrate[k];
							else
								bitData[k] = 0;
						}
					}
				}

				// 데이터셋을 찾지 못햇으면 새로운 id가 왔다는 의미로 업데이트
				if (!search) {
					var color1 = Math.floor(Math.random() * 256);
					var color2 = Math.floor(Math.random() * 256);
					var color3 = Math.floor(Math.random() * 256);

					console.log(color1 + " " + color2 + " " + color3)

					var newDataset = {
						label: curData[i].id,
						borderColor: 'rgba(' + color1 + ', ' + color2 + ', ' + color3 + ', 1)',
						backgroundColor: 'rgba(' + color1 + ', ' + color2 + ', ' + color3 + ', 1)',
						data: [],
						fill: false,
						datalabels: {
							color: 'black',
							align: 'top'
						}
					}

					// newDataset에 데이터 삽입
					for (var j = 0; j < 5; j++) {
						if (curData[i].bitrate[j])
							newDataset.data.push(curData[i].bitrate[j]);
						else
							newDataset.data.push(0);
					}

					// chart에 newDataset 푸쉬
					config.data.datasets.push(newDataset);
				}
				search = false;
			}
			myChart.update();
		}, 1500);
	}
	
	// //데이터 추가
	// document.getElementById('addData').onclick = function(){
		
	// 	//라벨추가
	// 	config.data.labels.push('data'+config.data.labels.length)
		
	// 	//데이터셋 수 만큼 반복
	// 	var dataset = config.data.datasets;
	// 	for(var i=0; i<dataset.length; i++){
	// 		//데이터셋의 데이터 추가
	// 		dataset[i].data.push(Math.floor(Math.random() * 50));
	// 	}
	// 	myChart.update();	//차트 업데이트
	// }
	
	// //데이터셋 추가
	// document.getElementById('addDataSet').onclick = function(){
	// 	var color1 = Math.floor(Math.random() * 256);
	// 	var color2 = Math.floor(Math.random() * 256);
	// 	var color3 = Math.floor(Math.random() * 256);
		
	// 	console.log(color1 + " " + color2 + " " + color3)
		
	// 	var newDataset = {
	// 		label: 'new Dataset'+config.data.datasets.length,
	// 		borderColor : 'rgba('+color1+', '+color2+', '+color3+', 1)',
	// 		backgroundColor : 'rgba('+color1+', '+color2+', '+color3+', 1)',
	// 		data: [],
	// 		fill: false
	// 	}
		
	// 	// newDataset에 데이터 삽입
	// 	for (var i=0; i< config.data.labels.length; i++){
	// 		var num = Math.floor(Math.random() * 50);
	// 		newDataset.data.push(num);
	// 	}
		
	// 	// chart에 newDataset 푸쉬
	// 	config.data.datasets.push(newDataset);
		
	// 	myChart.update();	//차트 업데이트
	// }
	
	// //데이터 삭제
	// document.getElementById('delData').onclick = function(){
		
	// 	config.data.labels.splice(-1,1);//라벨 삭제
		
	// 	//데이터 삭제
	// 	config.data.datasets.forEach(function(dataset) {
	// 		dataset.data.pop();
	// 	});
		
	// 	myChart.update();	//차트 업데이트
	// }
	
	// //데이터셋 삭제
	// document.getElementById('delDataset').onclick = function(){
	// 	config.data.datasets.splice(-1,1);
	// 	myChart.update();	//차트 업데이트
	// }
	
  </script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.7/cerulean/bootstrap.min.css" type="text/css"/>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.2/css/font-awesome.min.css" type="text/css"/>
</head>
<body>

<nav class="navbar navbar-default navbar-static-top">
</nav>

<div class="container">
	<div class="row">
		<div class="col-md-8">
			<div class="page-header">
				<h1>ATC Network Analyzer - Dashboard
					<button class="btn btn-default" autocomplete="off" id="start">Start</button>
				</h1>
			</div>
			<div class="container" id="details">
				<h2>Usecase1 : Multimedia(WebRTC)</h2>
			</div>
			<div class="container " id="room">
				<div class="row">
					<div class="col-md-4">
						<div class="panel panel-default">
							<div class="panel-heading">
								<h3 class="panel-title">User <span class="label label-info hide" id="user1"></span></h3>
							</div>
							<div class="panel-body relative" id="userresult1">
														<p>Recent latency: <span id="recent_ping_time"></span>ms</p>
														<p>Average latency: <span id="average_ping_time"></span>ms</p>
														<p>Packet loss: <span id="packet_loss"></span>%</p>
														<p>Network Throughput: <span id="network_throughput"></span></p>
                                                        <canvas id="meter" width=150 height=150 style="position:absolute; top: 15px; right: 15px">
							</div>
						</div>
					</div>
					<div class="chart-container" style="position: relative; height:200px; width:60vw">
						<canvas id="myChart1"></canvas>
					</div>
				</div>
				<div class="row">
					<div class="col-md-4">
						<div class="panel panel-default">
							<div class="panel-heading">
								<h3 class="panel-title">User <span class="label label-info hide" id="user2"></span></h3>
							</div>
							<div class="panel-body relative" id="userresult2">
														<p>Recent latency: <span id="recent_ping_time"></span>ms</p>
														<p>Average latency: <span id="average_ping_time"></span>ms</p>
														<p>Packet loss: <span id="packet_loss"></span>%</p>
														<p>Network Throughput: <span id="network_throughput"></span></p>
                                                        <canvas id="meter" width=150 height=150 style="position:absolute; top: 15px; right: 15px">
							</div>
						</div>
					</div>
					<div class="chart-container" style="position: relative; height:200px; width:60vw">
						<canvas id="myChart2"></canvas>
					</div>
				</div>
			</div>
		</div>
	</div>
	<button type="button" id="start">Start</button>
	<hr>

	<div class="footer">
	</div>
</div>

</body>
</html>



<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>chart.js</title>
<head>
	<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.bundle.min.js"></script>
	<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js"></script>
</head>
<body>
	<div class="chart-container" style="position: relative; height:200px; width:60vw">
		<canvas id="myChart"></canvas>
	</div>
	<button type="button" id="start">Start</button>

  <script>
	var ctx = document.getElementById('myChart');
	  
	var config = {
		type: 'line',
		data: {
			labels: [ // Date Objects
				'data1',
				'data2',
				'data3',
				'data4',
				'data5',
			],
			datasets: []
		},
		options: {
			maintainAspectRatio: false,
			title: {
				text: 'Chart.js Time Scale'
			},
			scales: {
				yAxes: [{
					scaleLabel: {
						display: true,
						labelString: 'Throughput'
					},
				}]
			},
            animaion: false
		}
	};

	//차트 그리기
	var myChart = new Chart(ctx, config);
    var datas;

	document.getElementById('start').onclick = function(){
		const target = document.getElementById('start');
		target.disabled = true;
		setInterval(function () {
			// console.log("Send bitrate with id");
			fetch('https://192.168.93.13:50000/data')
				.then((res) => res.json())
				.then((data) => datas = data);

			console.log(datas);
			// 데이터셋이 이미 존재했는지 확인하고 추가
			var curData = datas.dataset;
			var dataset = config.data.datasets;

			var search = false;
			for (var i = 0; i < curData.length; i++) {
				for (var j = 0; j < dataset.length; j++) {
					if (dataset[j].label == curData[i].id) {
						search = true;
						var bitData = dataset[j].data;
						for (var k = 0; k < 5; k++) {
							if (curData[i].bitrate[k])
								bitData[k] = curData[i].bitrate[k];
							else
								bitData[k] = 0;
						}
					}
				}

				// 데이터셋을 찾지 못햇으면 새로운 id가 왔다는 의미로 업데이트
				if (!search) {
					var color1 = Math.floor(Math.random() * 256);
					var color2 = Math.floor(Math.random() * 256);
					var color3 = Math.floor(Math.random() * 256);

					console.log(color1 + " " + color2 + " " + color3)

					var newDataset = {
						label: curData[i].id,
						borderColor: 'rgba(' + color1 + ', ' + color2 + ', ' + color3 + ', 1)',
						backgroundColor: 'rgba(' + color1 + ', ' + color2 + ', ' + color3 + ', 1)',
						data: [],
						fill: false,
						datalabels: {
							color: 'black',
							align: 'top'
						}
					}

					// newDataset에 데이터 삽입
					for (var j = 0; j < 5; j++) {
						if (curData[i].bitrate[j])
							newDataset.data.push(curData[i].bitrate[j]);
						else
							newDataset.data.push(0);
					}

					// chart에 newDataset 푸쉬
					config.data.datasets.push(newDataset);
				}
				search = false;
			}
			myChart.update();
		}, 1500);
	}
	
	// //데이터 추가
	// document.getElementById('addData').onclick = function(){
		
	// 	//라벨추가
	// 	config.data.labels.push('data'+config.data.labels.length)
		
	// 	//데이터셋 수 만큼 반복
	// 	var dataset = config.data.datasets;
	// 	for(var i=0; i<dataset.length; i++){
	// 		//데이터셋의 데이터 추가
	// 		dataset[i].data.push(Math.floor(Math.random() * 50));
	// 	}
	// 	myChart.update();	//차트 업데이트
	// }
	
	// //데이터셋 추가
	// document.getElementById('addDataSet').onclick = function(){
	// 	var color1 = Math.floor(Math.random() * 256);
	// 	var color2 = Math.floor(Math.random() * 256);
	// 	var color3 = Math.floor(Math.random() * 256);
		
	// 	console.log(color1 + " " + color2 + " " + color3)
		
	// 	var newDataset = {
	// 		label: 'new Dataset'+config.data.datasets.length,
	// 		borderColor : 'rgba('+color1+', '+color2+', '+color3+', 1)',
	// 		backgroundColor : 'rgba('+color1+', '+color2+', '+color3+', 1)',
	// 		data: [],
	// 		fill: false
	// 	}
		
	// 	// newDataset에 데이터 삽입
	// 	for (var i=0; i< config.data.labels.length; i++){
	// 		var num = Math.floor(Math.random() * 50);
	// 		newDataset.data.push(num);
	// 	}
		
	// 	// chart에 newDataset 푸쉬
	// 	config.data.datasets.push(newDataset);
		
	// 	myChart.update();	//차트 업데이트
	// }
	
	// //데이터 삭제
	// document.getElementById('delData').onclick = function(){
		
	// 	config.data.labels.splice(-1,1);//라벨 삭제
		
	// 	//데이터 삭제
	// 	config.data.datasets.forEach(function(dataset) {
	// 		dataset.data.pop();
	// 	});
		
	// 	myChart.update();	//차트 업데이트
	// }
	
	// //데이터셋 삭제
	// document.getElementById('delDataset').onclick = function(){
	// 	config.data.datasets.splice(-1,1);
	// 	myChart.update();	//차트 업데이트
	// }
	
  </script>
  <div id="data_log"></div>
</body>